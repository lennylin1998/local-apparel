generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  likedProducts LikedProduct[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LikedProduct {
  product_id String
  user_id    String
  product    Product @relation(fields: [product_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@id([user_id, product_id])
  @@index([product_id], map: "LikedProduct_product_id_fkey")
}

model Product {
  id               String         @id
  name             String
  brandId          Int?
  category         Category
  audience         Audience
  price            Int
  color            String?
  priority         Int            @default(0)
  likes            Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  description      String?        @db.Text
  shortDescription String?        @db.Text
  likedProducts    LikedProduct[]
  brand            Brand?         @relation(fields: [brandId], references: [id])

  @@index([brandId], map: "Product_brandId_fkey")
}

model Brand {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  description      String?   @db.Text
  products Product[]
}

enum Role {
  ADMIN
  USER
}

enum Category {
  T_SHIRT
  SHORTS
  SHOES
}

enum Audience {
  MEN
  WOMEN
  KIDS
}
