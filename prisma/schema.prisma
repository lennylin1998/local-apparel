// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)
  accounts       Account[]
  sessions       Session[]
  likedProducts  LikedProduct[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model LikedProduct {
  user_id     String
  product_id String
  user       User     @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  @@id([user_id, product_id])
}

model Product {
  id               String         @id
  name             String
  brandId          Int?
  category         Category
  audience         Audience
  price            Int
  color            String
  priority         Int            @default(0)
  likes            Int            @default(0)
  shortDescription String?        @db.Text
  description      String?        @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  likedProducts    LikedProduct[]
  brand            Brand?         @relation(fields: [brandId], references: [id])
}

enum Category {
  T_SHIRT
  SHORTS
  SHOES
}

enum Audience {
  MEN
  WOMEN
  KIDS
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

